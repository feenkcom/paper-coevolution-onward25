{
	"__schema" : "4.1",
	"__type" : "page",
	"children" : {
		"__type" : "snippets",
		"items" : [
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-02-21T10:36:55.111291+01:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-02-21T10:40:47.895305+01:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "3+vVdwXrDQCjRf46CE+1Kw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Software systems are commonly *opaque*, in the sense that it is hard to understand how they work: The running system is not queryable, and only shows you the end user's interface. Reading the source code is tedious and does not scale. Documentation is typically out-of-date, and may not answer the specific questions you have. Green tests are of limited use, as running them only shows their success, and reading the code also does not scale. Asking for help from other experts or from generative AI is risky due to the difficulty in assessing the accuracy of answers."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-02-21T10:46:20.99146+01:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-02-21T10:56:51.362397+01:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "3Cy2hgXrDQCrgUM5CE+1Kw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Clearly code and documentation are at odds with one another, but why is this so? Look at the way we learn to program. We start by writing some code in a text editor, we stare at it, we fiddle with it, we compile and run it, we assess the results, and then we go back to staring at the source code. Unless we write some comments, documentation plays no role in the process. Even the live, running system plays just a limited role, as we spend most of our time staring at source code. Even in a modern IDE, our first stop is always the code editor, where we mainly stare at source code."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-02-21T11:11:35.960784+01:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-02-21T11:11:35.960784+01:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "sCnd8wXrDQC5rrISDzJ95A=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "*Literate programming* was the first attempt to fuse code and documentation into readable documents that intersperse explanations of programs with the relevant code snippets. This has influenced many related efforts, such as documentation generation from code, and notebooks such as Jupyter and the R notebook. "
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-02-21T10:55:34.515754+01:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-02-21T11:16:03.053419+01:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "aq6OugXrDQC4YsOOCE+1Kw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "We envision a modern IDE in which development does not necessarily start from a code editor, but rather from a notebook page. Code and documentation co-evolve in symbiosis. Development tasks start as documentation describing goals and requirements, possibly containing links to existing code and notebook pages. Experiments can be performed as embedded code snippets. New software is developed iteratively and incrementally from the notebook pages. Test cases are extracted from scenarios in code snippets. Tests do not simply report success or failure, but return live *examples* that can be explored, or embedded into notebook pages to illustrate documentation points."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-02-21T11:17:47.316178+01:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-02-21T11:22:35.951781+01:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "GJn/CQbrDQCGEo3WDzJ95A=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Such an IDE needs to be aware of both documentation and code so that they can be developed in symbiosis. Links from  code to documentation and vice versa need to be fluid so one can easily navigate from one to the other. Search facilities must operate across the two worlds. Refactoring transformations need to apply not just to  the code base but to documentation as well. Scripts within notebook code snippets must be extractable to classes and methods, and conversely, scenarios  coded as test cases should be extractable to scripts for further experimentation."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-02-21T11:29:12.357682+01:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-02-21T11:35:38.389146+01:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "iIDUMgbrDQCd+sDIDzJ95A=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "We present many of these features in *Glamorous Toolkit* (or GT), an IDE for creating explainable software systems. Although GT features many familiar development tools, a cornerstone is the Lepiter notebook system which serves as a knowledge base for all development tasks and documentation. In section [[Examples]] we show how notebook pages are embellished with live examples produced from test cases. In section [[Searching]] we show how search facilities not only span code and documentation, but how they can be customized for an pplication domain. In section [[Refactoring]] we illustrate how refactoring operations can span both code and documentation, and how they can support transformations from playground scripts to methods and vice versa. In [[Impact on the Software Process]] we report on some of experiences with how such an environment impacts the software development process itself. We then discuss some [[Related work]] and conclude in [[Conclusions]] and sketch a few future directions."
			}
		]
	},
	"createEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"createTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2025-02-17T10:30:19.380966+01:00"
		}
	},
	"editEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"editTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2025-02-17T10:30:19.380966+01:00"
		}
	},
	"pageType" : {
		"__type" : "namedPage",
		"title" : "Introduction"
	},
	"uid" : {
		"__type" : "uuid",
		"uuid" : "3010e2e8-b4ea-0d00-91ba-1ad40a71a854"
	}
}